const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const FacebookStrategy = require("passport-facebook").Strategy;
const Admin = require("./models/admin.model"); // Adjust path as necessary

passport.serializeUser((admin, done) => {
  done(null, admin.id);
});

passport.deserializeUser((id, done) => {
  Admin.findById(id).then((admin) => {
    done(null, admin);
  });
});

// Google OAuth Strategy
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: "/auth/google/callback",
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingAdmin = await Admin.findOne({ googleId: profile.id });
      if (existingAdmin) {
        done(null, existingAdmin);
      } else {
        const newAdmin = await new Admin({
          googleId: profile.id,
          email: profile.emails[0].value,
        }).save();
        done(null, newAdmin);
      }
    }
  )
);

// Facebook OAuth Strategy
passport.use(
  new FacebookStrategy(
    {
      clientID: process.env.FACEBOOK_APP_ID,
      clientSecret: process.env.FACEBOOK_APP_SECRET,
      callbackURL: "/auth/facebook/callback",
      profileFields: ["id", "displayName", "photos", "email"],
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingAdmin = await Admin.findOne({ facebookId: profile.id });
      if (existingAdmin) {
        done(null, existingAdmin);
      } else {
        const newAdmin = await new Admin({
          facebookId: profile.id,
          email: profile.emails[0].value,
        }).save();
        done(null, newAdmin);
      }
    }
  )
);
